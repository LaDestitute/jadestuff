package mod.ooooscar.jadestuff.entity.projectile;

import net.minecraft.block.Block;
import net.minecraft.block.BlockState;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityType;
import net.minecraft.entity.IRendersAsItem;
import net.minecraft.entity.LivingEntity;
import net.minecraft.entity.projectile.ProjectileItemEntity;
import net.minecraft.entity.projectile.ThrowableEntity;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.network.datasync.DataParameter;
import net.minecraft.network.datasync.DataSerializers;
import net.minecraft.network.datasync.EntityDataManager;
import net.minecraft.util.Util;
import net.minecraft.util.math.BlockRayTraceResult;
import net.minecraft.util.math.EntityRayTraceResult;
import net.minecraft.util.math.RayTraceResult;
import net.minecraft.world.World;

public abstract class ModProjectileItemEntity extends ThrowableEntity implements IRendersAsItem {
    private static final DataParameter<ItemStack> ITEMSTACK_DATA = EntityDataManager.createKey(ProjectileItemEntity.class, DataSerializers.ITEMSTACK);

    public ModProjectileItemEntity(EntityType<? extends ModProjectileItemEntity> type, World worldIn) {
        super(type, worldIn);
    }

    public ModProjectileItemEntity(EntityType<? extends ModProjectileItemEntity> type, double x, double y, double z, World worldIn) {
        super(type, x, y, z, worldIn);
    }

    public ModProjectileItemEntity(EntityType<? extends ModProjectileItemEntity> type, LivingEntity livingEntityIn, World worldIn) {
        super(type, livingEntityIn, worldIn);
    }

    public void setItem(ItemStack stack) {
        if (stack.getItem() != this.getDefaultItem() || stack.hasTag()) {
            this.getDataManager().set(ITEMSTACK_DATA, Util.make(stack.copy(), (p_213883_0_) -> {
                p_213883_0_.setCount(1);
            }));
        }

    }

    protected abstract Item getDefaultItem();

    protected ItemStack func_213882_k() {
        return this.getDataManager().get(ITEMSTACK_DATA);
    }

    @Override
    protected void registerData() {
        this.getDataManager().register(ITEMSTACK_DATA, ItemStack.EMPTY);
    }

    /**
     * Called when this {@link ModProjectileItemEntity} hits an {@link Entity}
     */
    protected void onEntityHit(EntityRayTraceResult result) {
    }
    /**
     * Called when this {@link ModProjectileItemEntity} hits a {@link Block}
     */
    protected void func_230299_a_(BlockRayTraceResult p_230299_1_) {
        BlockState blockstate = this.world.getBlockState(p_230299_1_.getPos());
        blockstate.onProjectileCollision(this.world, blockstate, p_230299_1_, this);
    }
    /**
     * Called when this {@link ModProjectileItemEntity} hits a {@link Block} or an {@link Entity}
     */
    protected void onImpact(RayTraceResult result) {
        super.onImpact(result);
    }

}
